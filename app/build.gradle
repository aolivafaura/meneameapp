apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-kapt'
apply from: 'props.gradle'
apply from: '../jacoco.gradle'
apply from: '../config/dependencies.gradle'

android {
    signingConfigs {
        minifiedDebug {
            keyAlias 'test'
            keyPassword '12345678'
            storeFile file('../testprodflavor.keystore')
            storePassword '12345678'
        }
    }
    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        applicationId rootProject.applicationId
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.versionCode
        versionName rootProject.versionName
        testInstrumentationRunner "es.mnmapp.aolv.meneame.TestRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        manifestPlaceholders = [
                fabricApiKey: fabricApiKey
        ]
    }
    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            ext.enableCrashlytics = false
        }
        minifiedDebug {
            initWith(release)
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.minifiedDebug
        }
    }
    dexOptions {
        preDexLibraries true
        maxProcessCount 8
    }
    flavorDimensions "default"
    productFlavors {
        dev {
            dimension "default"
            versionNameSuffix "-dvlp"
            applicationIdSuffix '.dvlp'
        }
        prod {
            dimension "default"
        }
    }
    testOptions {
        animationsDisabled = true
        unitTests {
            includeAndroidResources = true
        }
    }
    lintOptions {
        abortOnError false
    }
}

android.variantFilter { variant ->
    // Exclude devRelease compilation
    if (variant.buildType.name == 'release' && (variant.getFlavors().get(0).name == 'dev')) {
        variant.setIgnore(true)
    }
    // Exclude prodDebug compilation
    if (variant.buildType.name == 'debug' && (variant.getFlavors().get(0).name == 'prod')) {
        variant.setIgnore(true)
    }
    // Exclude prodMinifiedDebug compilation
    if (variant.buildType.name == 'minifiedDebug' && (variant.getFlavors().get(0).name == 'dev')) {
        variant.setIgnore(true)
    }
}

dependencies {
    // Modules
    implementation project(path: ':data')
    implementation project(path: ':domain')

    // Unit testing
    testImplementation "junit:junit:$junitVersion"
    testImplementation "com.nhaarman:mockito-kotlin-kt1.1:$mockitoKotlinVersion"

    // Roboelectric
    testImplementation "org.robolectric:robolectric:$roboelectricVersion"

    // UI testing
    androidTestImplementation("com.android.support.test.espresso:espresso-core:$espressoVersion", {
        exclude group: "com.android.support", module: "support-annotations"
    })
    // Android runner and rules support
    androidTestImplementation "com.android.support.test:runner:$espressoRunnersVersion"
    androidTestImplementation "com.android.support.test:rules:$espressoRunnersVersion"
    // add this for intent mocking support
    androidTestImplementation "com.android.support.test.espresso:espresso-intents:$espressoSupportVersion"
    // add this for webview testing support
    androidTestImplementation "com.android.support.test.espresso:espresso-web:$espressoSupportVersion"
    // Mock server
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:$mockWebServerVersion"
    // Additional UI actions
    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:$espressoSupportVersion"
    // Idling resources
    androidTestImplementation "com.android.support.test.espresso.idling:idling-concurrent:$espressoSupportVersion"

    // Production code android testing
    implementation "com.android.support.test.espresso:espresso-idling-resource:$espressoSupportVersion"

    // Gson
    implementation "com.google.code.gson:gson:$gsonVersion"

    // Tracking
    implementation("com.crashlytics.sdk.android:crashlytics:$crashlyticsVersion") {
        transitive = true
    }
    releaseImplementation "com.google.firebase:firebase-core:$firebaseVersion"

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    // KTX
    implementation "androidx.core:core-ktx:$ktxVersion"

    // Support
    //noinspection GradleCompatible
    implementation "com.android.support:appcompat-v7:$supportVersion"
    implementation "com.android.support:design:$supportVersion"
    implementation "com.android.support:recyclerview-v7:$supportVersion"
    implementation "com.android.support:support-vector-drawable:$supportVersion"

    // Constraint layout
    implementation "com.android.support.constraint:constraint-layout:$constraintLayoutVersion"

    // Rx
    implementation "io.reactivex.rxjava2:rxandroid:$rxAndroidVersion"
    implementation "io.reactivex.rxjava2:rxjava:$rxJavaVersion"

    // Koin
    implementation "org.koin:koin-android:$koinVersion"
    implementation "org.koin:koin-android-architecture:$koinVersion"
    testImplementation "org.koin:koin-test:$koinVersion"

    // Logger
    implementation "com.jakewharton.timber:timber:$timberVersion"

    // Architecture components
    implementation "android.arch.lifecycle:runtime:$architectureComponentsVersion"
    implementation "android.arch.lifecycle:extensions:$architectureComponentsVersion"
    testImplementation "android.arch.core:core-testing:$architectureComponentsVersion"
    kapt "android.arch.lifecycle:compiler:$architectureComponentsVersion"

    // Stetho
    debugImplementation "com.facebook.stetho:stetho:$stethoVersion"
    debugImplementation("com.facebook.stetho:stetho-okhttp3:$stethoVersion") {
        exclude group: "com.squareup.okhttp3"
    }

    // Network
    compileOnly "com.squareup.okhttp3:okhttp:$okhttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpVersion"

    // Images
    implementation "com.squareup.picasso:picasso:$picassoVersion"
}

apply plugin: 'com.google.gms.google-services'