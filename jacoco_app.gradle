apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.0'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDevDebugUnitTest']) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/*$[0-9].*'
    ]
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/dev/debug", excludes: fileFilter)
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/devDebug", excludes: fileFilter)

    classDirectories = files([debugTree], [kotlinDebugTree])
    def coverageSourceDirs = [
            "src/main/java",
            "src/dev/java",
            "src/debug/java"
    ]
    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDevDebugUnitTest.exec',
            'outputs/code-coverage/connected/*coverage.ec'
    ])
}

task printCoverageReport(dependsOn: ['jacocoTestReport']) {
    ext.srcFile = file("$buildDir/reports/jacoco/jacocoTestReport/jacocoTestReport.xml")
    doLast {
        def report = new XmlParser()
        report.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        report.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)

        report.parse(srcFile).each { node ->
            if (node.attributes().type != null) {
                def covered = node.attributes().covered
                def missed = node.attributes().missed
                def total = Integer.valueOf(missed) + Integer.valueOf(covered)
                def percentage = (Integer.valueOf(covered) * 100) / Double.valueOf(total)

                println("${node.attributes().type}: ${String.valueOf(percentage.trunc(2))}% covered")
            }
        }
    }
}